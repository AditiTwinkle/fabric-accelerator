{"payload":{"connections":{"-1921270356":{"clusterType":"Engine","name":"-1921270356","connectionString":"","databases":{"-1921270356/b22b1edd-6292-97ea-4089-fe9314ea1177":{"id":"-1921270356/b22b1edd-6292-97ea-4089-fe9314ea1177","name":"b22b1edd-6292-97ea-4089-fe9314ea1177","prettyName":"kdb_fabricEvents","fetchState":"notStarted","fetchStateError":"","tables":{},"functions":{},"entityGroups":{},"accessMode":"ReadWrite","minorVersion":14,"majorVersion":53}},"id":"-1921270356","fetchState":"notStarted","fetchStateError":"","tooBigToCache":true,"serviceOffering":"Trident"}},"tabs":[{"id":"d3688bee-d6b2-4afb-a8d7-756fe74f5a81","queryRange":{"startLineNumber":1,"startColumn":1,"endLineNumber":7,"endColumn":1},"text":"//***********************************************************************************************************\n// Here are two articles to help you get started with KQL:\n// KQL reference guide - https://aka.ms/KQLguide\n// SQL - KQL conversions - https://aka.ms/sqlcheatsheet\n//***********************************************************************************************************\n\n// Use \"take\" to view a sample number of records in the table and check the data.\nYOUR_TABLE_HERE\n| take 100\n\n// See how many records are in the table.\nYOUR_TABLE_HERE\n| count\n\n// This query returns the number of ingestions per hour in the given table.\nYOUR_TABLE_HERE\n| summarize IngestionCount = count() by bin(ingestion_time(), 1h)\n\n","commandInContext":"//***********************************************************************************************************\n// Here are two articles to help you get started with KQL:\n// KQL reference guide - https://aka.ms/KQLguide\n// SQL - KQL conversions - https://aka.ms/sqlcheatsheet\n//***********************************************************************************************************\n\n","executionStatus":"notStarted","clientRequestId":null,"entityInContext":"-1921270356/b22b1edd-6292-97ea-4089-fe9314ea1177","commandType":"Query","commandWithoutLeadingComments":"//***********************************************************************************************************\n// Here are two articles to help you get started with KQL:\n// KQL reference guide - https://aka.ms/KQLguide\n// SQL - KQL conversions - https://aka.ms/sqlcheatsheet\n//***********************************************************************************************************\n\n","hideEmptyColumns":false,"cursorPosition":{"lineNumber":1,"column":1},"isProtectedMode":false},{"id":"9e6e1619-d0c3-4827-bc1f-34cc9440777e","queryRange":{"startLineNumber":30,"startColumn":1,"endLineNumber":32,"endColumn":1},"text":"// flattened workspaceEvents\nworkspaceEvents\n| extend eventData = parse_json(data)\n| project ['time'], type, eventData.itemId, eventData.itemName,eventData.workspaceId, eventData.workspaceName, eventData.itemKind, eventData.executingPrincipalId, eventData.executingPrincipalType\n\n// workspace daily usage\nworkspaceEvents\n| extend eventData = parse_json(data)\n| extend workspaceName = tostring(eventData.workspaceName)\n| extend itemKind = tostring(eventData.itemKind)\n| extend itemName = tostring(eventData.itemName)\n| extend executingPrincipalId = tostring(eventData.executingPrincipalId)\n| extend executingPrincipalType = tostring(eventData.executingPrincipalType)\n| summarize EventCount = count() by bin(['time'],1d), type, workspaceName, itemKind,itemName,executingPrincipalId, executingPrincipalType\n\n// .drop materialized-view dailyAggWorkspaceEvents\n\n// Materialized View with backfill\n.create async ifnotexists materialized-view with (backfill=true) dailyAggWorkspaceEvents on table workspaceEvents \n{\n    workspaceEvents\n    | extend eventData = parse_json(data)\n    | extend workspaceName = tostring(eventData.workspaceName)\n    | extend itemKind = tostring(eventData.itemKind)\n    | extend itemName = tostring(eventData.itemName)\n    | extend executingPrincipalId = tostring(eventData.executingPrincipalId)\n    | extend executingPrincipalType = tostring(eventData.executingPrincipalType)\n    | summarize EventCount = count() by bin(['time'],1d), type, workspaceName, itemKind,itemName,executingPrincipalId, executingPrincipalType\n\n}\n\n.show operations ('3f632e58-346d-484d-9629-5f80987b17dd')\n\ndailyAggWorkspaceEvents\n|count \n\nmaterialized_view('dailyAggWorkspaceEvents')\n|count \n\nlet filterDate = \"2025-02-22T00:00:00Z\";\nmaterialized_view(\"dailyAggWorkspaceEvents\")\n|summarize visits = sum(EventCount) by ['time'], workspaceName, itemName, itemKind\n|where ['time'] == filterDate\n| render piechart with (xaxis=log ,xcolumn=itemName, yaxis=log, ycolumns=visits, title =\"Daily Visits\")\n\n","commandInContext":"}\n\n","executionStatus":"gotFromCache","clientRequestId":"Kusto.Web.RTA.QuerySet;8c9893a4-dcf8-472d-b2ac-89fba5ae8931;771900d0-5bba-4d18-809a-a4c8848f387d","completionInfo":-1651037960,"entityInContext":"-1921270356/b22b1edd-6292-97ea-4089-fe9314ea1177","commandType":"Query","commandWithoutLeadingComments":"}\n\n","hideEmptyColumns":false,"cursorPosition":{"lineNumber":31,"column":1},"isProtectedMode":false}],"tabInContext":"9e6e1619-d0c3-4827-bc1f-34cc9440777e"}}